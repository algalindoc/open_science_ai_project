<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Finding Minimum Matching Cuts in H-free Graphs and Graphs of Bounded Radius and Diameter</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2025-02-26">26 Feb 2025</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Felicia</forename><surname>Lucke</surname></persName>
							<email>felicia.c.lucke@durham.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Durham University</orgName>
								<address>
									<country key="GB">United Kingdom</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Joseph</forename><surname>Marchand</surname></persName>
							<email>joseph.marchand@ens-paris-saclay.fr</email>
							<affiliation key="aff1">
								<orgName type="institution">ENS Paris-Saclay</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jannik</forename><surname>Olbrich</surname></persName>
							<email>jannik.olbrich@uni-ulm.de</email>
							<affiliation key="aff2">
								<orgName type="institution">Ulm University</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Finding Minimum Matching Cuts in H-free Graphs and Graphs of Bounded Radius and Diameter</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2025-02-26">26 Feb 2025</date>
						</imprint>
					</monogr>
					<idno type="MD5">F7776E9554DA9278061B73EBB31543D7</idno>
					<idno type="arXiv">arXiv:2502.18942v1[math.CO]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2025-03-04T16:36+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>minimum matching cut</term>
					<term>H-free graph</term>
					<term>diameter</term>
					<term>radius</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>A matching cut is a matching that is also an edge cut. In the problem Minimum Matching Cut, we ask for a matching cut with the minimum number of edges in the matching. We give polynomial-time algorithms for P7-free, S1,1,2-free and (P6 + P4)-free graphs, which also solve several open cases for the well-studied problem Matching Cut. In addition, we show NP-hardness for 3P3-free graphs, implying that Minimum Matching Cut and Matching Cut differ in complexity on certain graph classes. We also give complexity dichotomies for both general and bipartite graphs of bounded radius and diameter.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Given a graph G, a matching is a set of disjoint edges. For a partition of the vertex set V (G) = A ∪ B, the set of edges with one endvertex in A and one in B is an edge cut of G. A matching cut M is a set of edges which is a matching and an edge cut. The number of edges |M | is the size of a matching cut.</p><p>The problem Matching Cut, where we ask whether a given graph has a matching cut dates back to 1970 where Graham introduced it to prove a result on cube numbering, see <ref type="bibr" target="#b9">[10]</ref>. Both polynomial-time algorithms and NPcompleteness results have been published for many different graph classes such as chordal graphs ( <ref type="bibr" target="#b21">[22]</ref>), graphs of bounded diameter ( <ref type="bibr" target="#b1">[2]</ref>), graphs of bounded degree ( <ref type="bibr" target="#b4">[5]</ref>), and graphs of large girth ( <ref type="bibr" target="#b7">[8]</ref>). In addition, different variants and generalisations of the problem have been studied, see e.g. <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b22">23]</ref>.</p><p>The complexity of Matching Cut on H-free graphs has received attention over the last years. Due to the results in <ref type="bibr" target="#b7">[8]</ref> the only open cases are when the components of H are paths or subdivided claws. This puts a special focus on P r -free graphs, where P r , for r ≥ 1, is a path on r vertices. In <ref type="bibr" target="#b6">[7]</ref>, Feghali showed polynomial-time solvability for P 5 -free graphs. The first explicit result, for P 4free graphs, even dates back to <ref type="bibr" target="#b0">[1]</ref>. These results were extended to P 6 -free graphs in <ref type="bibr" target="#b18">[19]</ref>. Complementary NP-completeness results have been published in <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b18">[19]</ref>. The currently best result shows NP-completeness for P 14 -free graphs ( <ref type="bibr" target="#b14">[15]</ref>). This leaves the case of P r -free graphs, for 7 ≤ r ≤ 13, open. We contribute to closing this gap by giving in Theorem 13 a polynomial-time algorithm for P 7 -free graphs. We further contribute to the general aim of completing the complexity dichotomy for H-free graphs with our polynomial-time algorithms for S 1,1,2 and (P 6 + P 4 )free graphs.</p><p>Only recently, in <ref type="bibr" target="#b19">[20]</ref>, the size of a matching cut has been taken into account, when the optimisation problem Maximum Matching Cut was introduced. Complexity dichotomies for H-free graphs, graphs of bounded radius and diameter, as well as for graphs of bounded degree were given. Its natural counterpart, Minimum Matching Cut, was introduced in <ref type="bibr" target="#b15">[16]</ref>, where a polynomial-time algorithm for K 1,3 -free graphs was given.</p><p>It is known that for K 1,3 -free graphs, Maximum Matching Cut is NP-hard ( <ref type="bibr" target="#b19">[20]</ref>) while Matching Cut and Minimum Matching Cut are polynomialtime solvable ( <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b15">16]</ref>). This raises the question whether there is a graph H such that Minimum Matching Cut and Matching Cut differ in complexity on H-free graphs. We answer this question affirmatively by showing in Theorem 14 the NP-hardness of Minimum Matching Cut for 3P 3 -free graphs, on which Matching Cut is polynomial-time solvable, see <ref type="bibr" target="#b18">[19]</ref>.</p><p>We complement this result with our proofs that Minimum Matching Cut is polynomial-time solvable on S 1,1,2 -free, (P 6 + P 4 )-free, and P 7 -free graphs. We show that polynomial-time solvability on H-free graphs implies polynomialtime solvability on (H + P 2 )-free graphs. Our hardness construction for 3P 3 -free graphs, together with the fact that NP-hardness results for Matching Cut, such as those for K 1,4 -free <ref type="bibr" target="#b4">[5]</ref>, H * i -free graphs and graphs of high girth <ref type="bibr" target="#b20">[21]</ref>, carry over, leave only a constant number of cases open to complete the dichotomy for H-free graphs.</p><p>The distance dist(u, v) of two vertices u and v is the length of a shortest path between them. The eccentricity of a vertex v is the maximum distance between v and any other vertex of G. The radius of G is the minimum eccentricity of any vertex in G and the diameter the maximum eccentricity of any vertex in G. We consider Minimum Matching Cut on graphs of bounded radius and diameter and on bipartite graphs of bounded radius and diameter. From our results, we obtain the following complexity dichotomies: Theorem 1. For an integer r ≥ 1, Minimum Matching Cut for graphs of radius r is polynomial-time solvable if r ≤ 1 and NP-complete if r ≥ 2.</p><p>Theorem 2. For an integer d ≥ 1, Minimum Matching Cut for graphs of diameter d is polynomial-time solvable if d ≤ 2 and NP-complete if d ≥ 3.</p><p>Theorem 3. For an integer r ≥ 1, Minimum Matching Cut for bipartite graphs of radius r is polynomial-time solvable if r ≤ 2 and NP-complete if r ≥ 3. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminaries</head><p>We only consider finite, simple, undirected graphs. Let G = (V, E) be a graph and v ∈ V a vertex. We denote by n the number of vertices of G. The set N (v) = {u ∈ V |uv ∈ E} is the neighbourhood of v and |N (v)| the degree of v. We say that a vertex u ∈ V is a private neighbour of v (with respect to a set S) if it is only adjacent to v (in S). Let C ⊆ V . We say v is adjacent to C if there is a vertex u ∈ C such that v is adjacent to u. We denote by dist C (u, v) the length of a shortest path between u and v using only vertices in C.</p><p>We denote by G[C] the graph induced by C. Let H be a graph. If H is an induced subgraph of G, we write H ⊆ i G or G ⊇ i H. We say that a graph is H-free if it does not contain H as an induced subgraph. We denote by sG, s ≥ 1, the graph arising from the disjoint union of s copies of G. Let r, ℓ ≥ 1 be integers. Let P r , C r , K r be the path, cycle, complete graph, each on r vertices. A graph is bipartite if there is a partition V = A ∪ B such that all edges of G have one endvertex in A and one in B. We denote by K r,ℓ the complete bipartite graph with |A| = r and |B| = ℓ. We call the graph K 1,3 = S 1,1,1 a claw. S i,j,k , for i, j, k ≥ 1, can be obtained by subdividing the edges of a claw i, j and k times. Let H * 1 be the "H"-graph with vertices u, v, x 1 , x 2 , y 1 , y 2 and edges uv, ux 1 , ux 2 , vy 1 , vy 2 . From this graph we obtain H * i by subdividing the edge uv i − 1 times. A red-blue colouring of G is a colouring of the vertices with red and blue, using each colour at least once. We say that a red-blue colouring is valid if every red vertex is adjacent to at most 1 blue vertex and every blue vertex is adjacent to at most 1 red vertex. An edge is bichromatic if it has one red and one blue endvertex, and an edge or a vertex set S ⊆ V is monochromatic if all vertices in S have the same colour. Let R be the set of red vertices of</p><formula xml:id="formula_0">G. A red component of G is a connected component of the graph G[R]. Similarly, for B, the set of blue vertices, a blue component of G is a connected component of G[B].</formula><p>The value ν of a valid red-blue colouring is the number of bichromatic edges. We make several well-known observations, see e.g. <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20]</ref>.</p><p>Observation 1 A graph G has a matching cut of size ν if and only if it has a red-blue colouring of value ν.</p><p>Observation 2 For every ℓ ≥ 3 and r ≥ 2, K ℓ and K ℓ,r are monochromatic in any valid red-blue colouring.</p><p>Observation 3 If a graph G has a vertex v of degree 1, then the partition of the vertices into the sets {v} and V \ {v} leads to a matching cut of size 1.</p><p>Let R, B ⊆ V with R ∩ B = ∅. A red-blue (R, B)-colouring is a partial colouring of G where the vertices in R are coloured red and those in B are coloured blue. We say that a red-blue (R, B)-colouring is valid if it can be extended to a valid red-blue colouring. Given a pair (R, B), we define propagation rules that try to extend the red-blue (R, B)-colouring or show that no valid red-blue (R, B)colouring exists. Some of these rules have already been given in <ref type="bibr" target="#b13">[14]</ref> and have been widely used since then. Let R ′ ⊆ R be the set of red vertices which have a blue neighbour in B and similarly, let B ′ ⊆ B be the set of blue vertices with a red neighbour in R.</p><formula xml:id="formula_1">Let Z = V \ (R ∪ B).</formula><p>We say that a propagation rule is safe if G has a valid red-blue (R, B)-colouring before the application of the rule if and only if G has a valid red-blue (R, B)colouring after the application of the rule.</p><p>Lemma 1. Propagation rules R1-R5 are safe, can be applied in polynomial time, their application creates no additional red and blue components and does not increase the minimum possible value of a valid red-blue (R, B)-colouring.</p><p>Proof. The safeness for R1 and R2 has already been proven in <ref type="bibr" target="#b13">[14]</ref>. Since by Observation 2 triangles and K 2,3 are monochromatic, it follows that R3 and R5 are safe. To see that R4 is safe, recall that we start with at least one vertex of each colour. This guarantees the existence of vertices of both colours and, therefore, we may colour connected components adjacent to vertices of only one colour in that colour. For every application of a propagation rule, we only colour vertices with the colour of one of their neighbours. Therefore, we do not create any additional coloured components. Note further that R1-R3 and R5 preserve the value of the colouring. R4 only decreases the maximum possible value but never results in an increase of the minimum possible value.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>⊓ ⊔</head><p>The following lemmas have been shown previously for Maximum Matching Cut in <ref type="bibr" target="#b19">[20]</ref>.</p><p>Lemma 2. Let G be a connected graph with domination number g. We can find a minimum red-blue colouring of G or conclude that no such colouring exists in time O(2 g n g+2 ).</p><p>Proof. Let D be a dominating set of G with |D| = g. We branch over all 2 |D| = 2 g options of colouring the vertices of D red or blue. For every coloured vertex without a neighbour of the other colour, we consider all O(n) options to colour its neighbourhood. For every vertex v with a neighbour of the other colour, we colour all its other neighbours with the colour of v. Since D is a dominating set, we guessed a red-blue colouring of the whole graph G. We can check in time O(n 2 ) whether this colouring is a valid red-blue colouring and compute its value. If the colouring is not valid, we discard the branch, otherwise we remember its value and output the valid colouring with the smallest value. Since we consider O(2 g n g ) colourings, we get a runtime of O(</p><formula xml:id="formula_2">2 g n g+2 ). ⊓ ⊔ X Y U X Y U</formula><p>Fig. <ref type="figure" target="#fig_8">1</ref>: A perfect matching in G ′ (left) and the corresponding minimum valid red-blue colouring.</p><p>Lemma 3. Let G = (V, E) be a connected graph with a red-blue (R, B)-colouring, for R, B ⊆ V . If V \ (B ∪ R) induces an independent set then it is possible in polynomial time to either find a minimum valid red-blue (R, B)-colouring or to conclude that G has no valid red-blue (R, B)-colouring.</p><formula xml:id="formula_3">Proof. Let Z = V \ (B ∪ R).</formula><p>According to R4, we colour every vertex of Z that is only adjacent to vertices of one colour with this colour. Let U be the set of the remaining uncoloured vertices of Z, i.e., the vertices with neighbours in both R and B. Let W = N (U ). Let G ′ be the graph with vertex set U ∪ W and edge set E(G ′ ) = {uv|u ∈ U, v ∈ W }. We claim that the set of bichromatic edges of every valid red-blue (R, B)-colouring of G is the union of a perfect matching in G ′ and the set of edges with one endvertex in R and one in B.</p><p>First suppose that G ′ has a perfect matching M . Let z ∈ U . Suppose that z is incident to an edge zw ∈ M . If w ∈ R we colour z in blue. Otherwise, w ∈ B and we colour z red. Since M is perfect, we coloured every vertex in U and every vertex in W got at most one neighbour of the other colour. We obtain a valid red-blue colouring of G. Now suppose that G has a valid red-blue (R, B)-colouring. Every edge with an endvertex in R and the other one in B is bichromatic and there are no other bichromatic edges in G[R ∪ B]. Let M be the set of bichromatic edges in the remaining graph. Note that every edge of M has an endvertex in U so M is in G ′ . By definition of a red-blue colouring, M has to be a matching. Moreover, if z ∈ U then z has a blue neighbour and a red neighbour, so it is contained in a bichromatic edge. We conclude that M is perfect.</p><p>Since G ′ is bipartite we can determine a maximum matching of G ′ in polynomial time using Karp's algorithm <ref type="bibr" target="#b10">[11]</ref>. Note that every perfect matching in G ′ has the same size. It follows that we can find a minimum valid red-blue (R, B)colouring or conclude that there is no valid red-blue (R, B)-colouring in polynomial time.</p><p>⊓ ⊔</p><p>We need two results from the literature as well as more lemmas for red-blue colourings in P 7 -free graphs. Suppose that there is a vertex x ∈ Z which is not adjacent to a vertex in B. Let C be the connected component of x in G[Z]. Since C was not coloured by R4, there is at least one vertex y in C adjacent to a vertex b in B. If there are several such vertices, we take y to be the closest to x in C. Let x = p 0 . . . p k = y be the shortest path between x and y in C. Since G is P 7 -free, we have k ≤ 6. Let q 0 , . . . , q k be the red neighbours of p 0 , . . . , p k , see Figure <ref type="figure" target="#fig_2">2</ref>. We branch over the O(n 6 ) colourings of N (q 0 ) ∪ • • • ∪ N (q k ) and propagate the colouring. We leave C uncoloured even though we already know its colour.</p><p>All connected components of G[Z] that contain a vertex without a blue neighbour are adjacent to b. </p><formula xml:id="formula_4">′ . Further, let u ∈ C ′ be a neighbour of b ′ , v ∈ C ′</formula><p>be a neighbour of u and q v ∈ R be the red neighbour of v, see Figure <ref type="figure" target="#fig_2">2</ref>. We claim that p 0 . . . p k b 0 . . . b ℓ u v q v is an induced path of length at least 7. Note first that, by assumption, x is not adjacent to any of b 0 , . . . , b ℓ . Further, the choice of y implies that none of p 1 , . . . , p k−1 was adjacent to any of b 0 , . . . , b ℓ . Any uncoloured neighbour of y is in C and remains uncoloured. Therefore, and since y did not have two blue neighbours before colouring the neighbourhood of q 0 , . . . , q k , y has no neighbour in b 1 , . . . , b ℓ . Note further that no vertex of C can be adjacent to a vertex in C ′ . If q v is a neighbour of one of p 0 , . . . , p k and was uncoloured before colouring the neighbours of q 0 , . . . , q k , it would belong to C and thus, remains uncoloured. Also, if q v would be one of the red neighbours of p 0 , . . . , p k that is, q v is one of q 0 , . . . , q k , v would have been coloured. For the same reason, q v cannot be adjacent to any of the b 0 , . . . , b ℓ or to u. Therefore, p 0 . . . p k b 0 . . . b ℓ u v q v is indeed an induced P 7 , a contradiction to our assumption that G is P 7 -free. ⊳ By Claim 6.1, we may assume that if there is any uncoloured vertex without a blue neighbour, then there is a vertex b in B which is adjacent to all connected components containing such a vertex. Since the connected components of G[Z] are monochromatic, we branch over the O(n) colourings of the components adjacent to b and propagate the colouring using R1-R5. If we obtain a no-answer, we discard the branch. Therefore, we may assume that every vertex in Z is adjacent to a blue and a red vertex. This implies that in every valid red-blue (R, B)-colouring of G, every vertex in Z contributes 1 to the value of the colouring. Therefore, the value of all valid red-blue (R, B)-colourings is the same, and we apply Lemma 4. We either find a valid red-blue colouring or conclude that no such colouring exists. In the first case we remember its value, in the latter, we discard the branch.</p><formula xml:id="formula_5">p k = y p1 x = p0 q k q1 q0 C b = b0 b1 b ℓ = b ′ v u qv C ′</formula><p>Whenever we discard a branch, we consider the next. We remember the value of every valid red-blue colouring which we obtain and return the minimum of their values or that no such colouring exists. The correctness of our algorithm follows from its description. We consider in total O(n 7 ) branches, each of which can be processed in polynomial time. Therefore, our algorithm runs in polynomial time.</p><p>⊓ ⊔ Lemma 7. Let G be a connected P 7 -free graph with a connected dominating set D. Let D ′ be a dominating set of G[D] of size g. We can find in polynomial time a minimum red-blue colouring of G in which D ′ is monochromatic or conclude that no such colouring exists.</p><p>Proof. Let D be a dominating set of G and D ′ a dominating set of G[D] of size g. Without loss of generality, we colour D ′ red. We branch over all O(n g ) colourings of the neighbourhood of D ′ . Note that this implies that D is coloured. We propagate the colouring exhaustively using R1-R5. If we obtain a no-answer we discard the branch, otherwise we continue. Let R be the set of red vertices and B the set of blue vertices.</p><p>Since D is dominating and coloured, every uncoloured vertex has a neighbour in D. Note that every blue vertex in D has a red neighbour in D ′ . Thus, the neighbours of the blue vertices in D are coloured blue by propagation. Therefore, every uncoloured vertex has exactly one red neighbour in D resulting in a monochromatic dominating set. We apply Lemma 6 to either find a minimum red-blue (R, B)-colouring whose value we remember or conclude that no such colouring exists and discard the branch.</p><p>Whenever we discard a branch, we consider the next. If no branch returns a valid red-blue colouring we return that no such colouring exists, otherwise we return the obtained red-blue colouring with the minimum value.</p><p>The correctness of our algorithm follows from its description. Every branch can be processed in polynomial time, and we consider O(n g ) branches. Therefore, our algorithm runs in polynomial time.</p><p>⊓ ⊔</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Polynomial-Time Results</head><p>Before showing our main results in this section, we first state several results where the proof methods of Maximum Matching Cut directly carry over to Minimum Matching Cut. To obtain the following results we reuse the proofs from <ref type="bibr" target="#b19">[20]</ref> and <ref type="bibr" target="#b17">[18]</ref>, apply Lemma 2 and 3 instead of the corresponding results for Maximum Matching Cut, and replace maximum by minimum.</p><p>Theorem 6. Minimum Matching Cut is solvable in polynomial time for P 6free graphs.</p><p>Theorem 7. Let H be a graph. If Minimum Matching Cut is polynomialtime solvable for H-free graphs, then it is so for (H + P 2 )-free graphs.</p><p>Theorem 8. Minimum Matching Cut is solvable in polynomial time for graphs of diameter at most 2.</p><p>Theorem 9. Minimum Matching Cut is solvable in polynomial time for bipartite graphs of radius at most 2.</p><p>Theorem 10. Minimum Matching Cut is solvable in polynomial time for bipartite graphs of diameter at most 3.</p><p>We now get to our main results of this section. All three results solve open cases for Matching Cut.</p><p>Theorem 11. Minimum Matching Cut is solvable in polynomial time for S 1,1,2 -free graphs.</p><p>Proof. Let G be a S 1,1,2 -free graph. We first check whether G has a vertex of degree 1 leading to a minimum matching cut, see Observation 3. Therefore, we may assume that G has minimum degree 2. We apply Observation 1 and search for a minimum red-blue colouring of G.</p><p>We branch over all O(n 2 ) options of choosing two adjacent vertices x and y of G. For every such pair we colour x red and y blue. We propagate the red-blue ({x}, {y})-colouring exhaustively which takes polynomial time by Lemma 1. If we get a no-answer, we discard the branch, otherwise, we obtained a red set R and a blue set B. Let Z be the set of uncoloured vertices.</p><formula xml:id="formula_6">Claim 11.1. G[Z] is claw-free.</formula><p>Proof of the Claim. Suppose for a contradiction that there is a claw</p><formula xml:id="formula_7">C in G[Z], consisting of vertices u, v 1 , v 2 , v 3 such that u is adjacent to v 1 , v 2 , v 3 .</formula><p>Consider a shortest path from C to x avoiding blue vertices. Note that such a path always exists, otherwise C would be blue by R4. Suppose that there is a path starting from u. Let u = p 0 p 1 . . . p k = x be such a path and set p k+1 = y. Since all neighbours of y except x are blue, the path p 0 . . . p k+1 is induced. If u was adjacent to x it would be coloured by R2. Since it is uncoloured we have k ≥ 1. Note that p 2 is not adjacent to any vertex in C, otherwise there is a shorter path from C to x. If at least two of v 1 , v 2 , v 3 , say v 1 and v 3 , are not adjacent to p 1 , then u, v 1 , v 3 , p 1 , p 2 induce S 1,1,2 . Hence, we may assume v 1 and v 3 are adjacent to p 1 . If p 3 = y, an edge from p 3 to C would imply the existence of a shorter path. Recall that y is not adjacent to C. Thus, in any case, p 3 cannot be adjacent to v 1 or v 3 and p 1 , v 1 , v 3 , p 2 , p 3 induce S 1,1,2 , a contradiction.</p><p>It remains to consider the case where no shortest path from C to x avoiding blue vertices starts from u. We may assume without loss of generality that there is such a path starting from v 1 . Let v 1 = p 0 . . . p k = x be such a path. Note that from the fact that v 1 is uncoloured, we get k ≥ 1.</p><formula xml:id="formula_8">If p 1 is neither adjacent to v 2 nor to v 3 then u, v 1 , p 1 , v 2 , v 3 is an induced S 1,1,2 .</formula><p>As before, neither p 2 nor p 3 can be adjacent to v 1 or v 3 . Hence, we find an S 1,1,2 with p 1 , v 1 , v 3 , p 2 , p 3 . ⊳ Suppose first that G[Z] is a cycle with at least 4 vertices. Every vertex in G[Z] has at most one red and one blue neighbour which is neither x nor y. Two neighbours on the cycle do not have a common coloured neighbour, since otherwise they would have been coloured. Thus, we can find an induced S 1,1,2 by taking a vertex, its two neighbours on the cycle, one of its coloured neighbours, say v and a neighbour of v on the shortest coloured path towards x and y.</p><p>Let now Z ∆ be the set of edges of G[Z] which are contained in some triangle. Let C 1 , . . . , C r be the connected components of G[Z ∆ ]. Then, each of C 1 , . . . , C r is monochromatic. We apply propagation rule R2 on each of the sets C 1 , . . . , C r to eventually extend them with other vertices which will necessarily get the same colour. If due to the propagation two sets C 1 , . . . , C r share a vertex, we unite them and continue the propagation with this set. This propagation might change the number of sets. After the propagation, we update the integer r and assume that we have r sets C 1 , . . . , C r .</p><p>Let Z ′ ⊆ Z be the set of edges not contained in Z ∆ . Since G[Z] is claw-free and not a cycle, the graph induced by the edges of Z ′ is a collection of paths.</p><p>We contract each of the sets X, Y, C 1 , . . . , C r to a single vertex and obtain a graph G ′ . Note that this might result in a multigraph. Claim 11.2. G has a red-blue (x, y)-colouring of value µ if and only if G ′ has an (x, y)-cut of size µ.</p><p>Proof of the Claim. Suppose G has a red-blue (x, y)-colouring of value µ. Then, every component X, Y, C 1 , . . . , C r is monochromatic, that is, no bichromatic edge is inside one of these components. Thus, every bichromatic edge in G corresponds to an edge in G ′ , and the cut of G induced by the bichromatic edges is a cut in G ′ of the same size.</p><p>For the other direction suppose that G ′ has an (x, y)-cut of size µ. This cut partitions the vertex set into two sets. We colour the set containing x red and the set containing y blue. Recall that the graph induced by the vertex set of Z ′ is a collection of disjoint paths. Thus, every vertex in G is adjacent to at most one vertex of the other colour and the colouring is valid. Note that the value of the colouring equals the size of the cut in G ′ . ⊳</p><p>We follow this approach for every pair of vertices x, y. Whenever we get a contradiction, we discard the branch. For every branch that leads to a valid redblue colouring, we remember the value of this colouring and minimize over all values of all valid red-blue colourings obtained in the process.</p><p>The correctness of our algorithm follows from its description. Regarding the running time, note that by Lemma 1 the propagation of the colouring can be done in polynomial time. Further, we consider O(n 2 ) branches and for each branch, we apply a minimum cut algorithm. This can be done, for example, in O(n 2 |E(G)|), using Dinic's algorithm, see <ref type="bibr" target="#b5">[6]</ref>. Thus, our algorithm runs in polynomial time.</p><p>⊓ ⊔</p><p>For the proof of Theorem 12, we need the following lemma and apply Theorem 6.</p><p>Lemma 8. Let G be a connected P 4 -free graph on n vertices. Then, G has at most 2n different valid red-blue colourings.</p><p>Proof. It is well-known (see e.g. Lemma 2 in <ref type="bibr" target="#b12">[13]</ref>) that every connected P 4free graphs has a spanning complete bipartite subgraph K k,l for some integers Proof. Let G be a (P 6 +P 4 )-free graph. If G is P 6 -free, we can determine whether G has a minimum matching cut using Theorem 6. Thus, we may assume that G is not P 6 -free. Let P be an induced P 6 of G. Note that we can find P in O(n 6 ).</p><formula xml:id="formula_9">1 ≤ k ≤ l. By Observation 2, we get that K k,l is monochromatic if k ≥ 2 and l ≥ 3. If k = 1,</formula><p>We apply Observation 1 and search for a minimum red-blue colouring of G.</p><p>We branch over all possible colourings of P and N (P ). There are at most O(n 6 ) such colourings since there is a constant number of colourings of P and every vertex of P has at most one neighbour of the opposite colour. If the colouring of P and N (P ) is monochromatic, say all vertices are blue, then we branch over all O(n) options of colouring one of the uncoloured vertices red. Let B be the set of blue vertices of G and let R be the set of red vertices of G. We propagate the (R, B)-colouring using rules R1-R5. If we get a contradiction, we discard the branch.</p><p>Since each of the six vertices of P has at most one neighbour of the opposite colour, there are at most 6 red and 6 blue components in G. By Lemma 1 this still holds after the propagation. Let Z be the set of uncoloured vertices of G. Note that G[Z] is P 4 -free. We make a first observation.</p><p>Claim 12.1. Let v be a coloured vertex, say v is blue. Suppose v is adjacent to w ∈ Z. We colour w and propagate the colouring. Regardless of the colour of w, we did not create an additional blue or red component.</p><p>Proof of the Claim. If w is coloured blue, then, since w is adjacent to the blue vertex v, we did not create a new connected component. Now assume that w is coloured red. Let C be the connected component of G[Z] containing w. Then, since v is blue, we colour all uncoloured neighbours of w red. Note that by R4, the component C has at least one vertex adjacent to a vertex in a red component. Let p be such a vertex. Note that since C is P 4 -free, we have diam(C) ≤ 2. Therefore, either w is adjacent to p or they have a common neighbour. Since all neighbours of w in C are coloured red, p has two red neighbours and is therefore coloured red as well.  Suppose now that we picked the blue component B w before, using a vertex v. That is, there was a connected component</p><formula xml:id="formula_10">(n 5 ) colourings of C ∪ N (w) ∪ N (q 1 ) ∪ N (q 2 ) ∪ N (b 2 ).</formula><formula xml:id="formula_11">C ′ of G[Z] with a blue neighbour v in B w . Let s ′ 1 , s ′ 2 , q ′ 1 , q ′</formula><p>2 and b ′ 2 be the vertices and neighbours of C ′ considered while processing C ′ . Note that if there are several vertices w ∈ B w which are adjacent to C, we may assume that dist B (v, w) is minimized among the options for w. Further, v = w, since the neighbours of v were coloured when processing C ′ and w has an uncoloured neighbour. Let now s 1 , s 2 ∈ C such that s 1 is adjacent to both w and s 2 . Let v t 1 . . . t k w with t 1 , . . . , t k ∈ B w be a shortest blue path between v and w. Note that this implies that the path is an induced P k+2 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Claim 12.2. There is an induced</head><formula xml:id="formula_12">P 6 in G[s 1 , s 2 , s ′ 1 , s ′ 2 , v, t 1 , . . . , t k , w].</formula><p>We may colour this path and its neighbourhood in polynomial time.</p><p>Proof of the Claim. Note first that, due to R3, s ′ 2 is not adjacent to v and s 2 is not adjacent to w. Additionally, s ′ i and s j , with i, j ∈ {1, 2}, are not adjacent, otherwise s j would have been in C ′ . Further, s j cannot be adjacent to v, since the neighbours of v have been coloured while processing C ′ . If w was uncoloured</p><formula xml:id="formula_13">s ′ 2 s ′ 1 b ′ 2 q ′ 2 q ′ 1 C ′ v t1 t k w Bw s2 s1 b2 q2 q1</formula><p>C Fig. <ref type="figure">3</ref>: The connected components C and C ′ adjacent to B w as considered in Claim 12.2. before processing C ′ , it cannot be adjacent to s ′ i , otherwise s j would have been in C. If w was blue before processing C ′ , then since v = w and s ′ 1 had at most one blue neighbour, w is not adjacent to s ′ 1 . Also, w is not adjacent to s ′ 2 since otherwise w = b ′ 2 and therefore, s 1 was coloured. Thus, we know that</p><formula xml:id="formula_14">G[v, s ′ 1 , s ′ 2 , w, s 1 , s 2</formula><p>] is an induced 2P 3 . However, there might be edges from t ℓ , ℓ ∈ {1, . . . , k} to s ′ 1 , s ′ 2 , s 1 , and s 2 . If there was an edge t ℓ s 1 or t ℓ s 2 , for ℓ ∈ {1, . . . , k}, then we would have chosen t ℓ instead of w due to the shorter distance from v to t ℓ . Thus, there might only be edges from t ℓ , ℓ ∈ {1, . . . , k} to s ′ 1 , s ′ 2 . If there is no such edge, then s ′ 2 s ′ 1 v t 1 . . . t k w s 1 s 2 is an induced path of length at least 6 and we branch over all O(n 5 ) colourings of C ∪ N (w) ∪ N (q 1 ) ∪ N (q 2 ) ∪ N (b 2 ). Otherwise, let ℓ ∈ {1, . . . , k} be the largest integer such that one of s ′ 1 and</p><formula xml:id="formula_15">s ′ 2 is adjacent to t ℓ . If exactly s ′ 1 is adjacent to t ℓ , then P ′ = s ′ 2 s ′ 1 t ℓ . . . t k w s 1 s 2 is an induced path. If exactly s ′ 2 is adjacent to t ℓ , then P ′ = s ′ 1 s ′ 2 t ℓ . . . t k w s 1 s 2 is an induced path.</formula><p>In both cases, P ′ contains an induced P 6 . Note that P ′ has length at most 10, since a P 11 contains an induced P 6 + P 4 . Thus, k − ℓ + 1 ≤ 5. We branch over all O(n 10 ) colourings of C∪N (t ℓ )∪• • •∪N (t k )∪N (w)∪N (q 1 )∪N (q 2 )∪N (b 2 ).</p><p>Otherwise, both s ′ 1 and s ′ 2 are adjacent to t ℓ . Since s ′ 1 , s ′ 2 , t ℓ form a triangle, by R3, they have all been coloured while processing C ′ . Note that t ℓ is adjacent to w since otherwise there is an induced P 6 contained in the induced path s ′ 1 t ℓ t ℓ+1 . . . w s 1 s 2 . Therefore, w was already blue when C ′ was processed since otherwise w, s 1 and s 2 were in C ′ and got coloured. It follows that t ℓ is not adjacent to v; otherwise, it would have been adjacent to two blue vertices before processing v. Let P ′ = v t 1 . . . t k w s 1 s 2 . Then, P ′ contains an induced P 6 . We branch over all O(n 11 ) colourings of</p><formula xml:id="formula_16">C ∪ N (w) ∪ N (t 1 ) ∪ . . . ∪ N (t k ) ∪ N (q 1 ) ∪ N (q 2 ) ∪ N (b 2 ).</formula><p>⊳ Let P ′ be the induced P 6 constructed in Claim 12.2. We may assume that P ′ and its neighbourhood are coloured. We apply the propagation rules R1-R5 again. If we get a no-answer, we discard the branch, otherwise we continue.</p><p>Claim 12.3. No uncoloured vertex and no red vertex of G adjacent to an uncoloured vertex is adjacent to P ′ . Proof of the Claim. Note that we coloured all neighbours of P ′ . Thus, P ′ has no uncoloured neighbours. Let q be a red vertex adjacent to P ′ . Suppose for a contradiction that q has an uncoloured neighbour x. Then, q is not adjacent to a blue vertex of P ′ , otherwise x would have been coloured. Suppose that q is adjacent to s i , for i ∈ {1, 2}; the case of s ′ i works the same way. If q was uncoloured when s i got coloured, then both q and x were in C and therefore got coloured together with s i . Otherwise, q was q i , the only red neighbour of s i and x would have been coloured. ⊳</p><p>Red Coast Processing Recall that Z is the set of uncoloured vertices. If G[Z] only consists of isolated vertices, we apply Lemma 3. We either obtain a valid red-blue colouring in which case we remember its value or no such colouring exists and we discard the branch. So in the following, we may assume that G[Z] has some connected component of size at least 2. After proving in Claim 12.4 that every red vertex has neighbours in at most one uncoloured component, we show that their structure is very restricted.</p><p>Claim 12.4. Let K be a connected component of G[Z] of size at least 2. Let q ∈ R be a red neighbour of K. Every uncoloured neighbour of q is in K.</p><p>Proof of the Claim. Recall that by R4, every uncoloured component has a red neighbour. Suppose for a contradiction that there is a vertex u ∈ Z which is adjacent to q but not contained in</p><formula xml:id="formula_17">K. Let x 1 , x 2 ∈ V (K) such that q x 1 , x 1 x 2 ∈ E(G). Then, q x 2 /</formula><p>∈ E(G), since otherwise x 1 and x 2 would be coloured by R3. Hence, P ′′ = x 2 x 1 q u is an induced P 4 . By Claim 12.3, P ′ + P ′′ is an induced P 6 + P 4 , a contradiction. ⊳ Let K be a connected component of G[Z] of size at least 2.</p><p>Case 1: Suppose that there is a red vertex q with at least two neighbours in K, say x 1 and x 2 . Then x 1 and x 2 cannot be adjacent since otherwise they would be coloured by R3. Since x 1 and x 2 are in the same connected component K of G[Z], they are connected by a path in K. If the shortest path in K between them has length at least three, it is an induced P 4 , say P ′′ , and by Claim 12.3 we obtain that P ′ + P ′′ is an induced P 6 + P 4 . Thus, the distance of x 1 and x 2 is exactly two and therefore there is a vertex x 3 ∈ K such that x 3 is adjacent to both x 1 and x 2 . Note that if q was adjacent to x 3 then x 1 , x 2 and x 3 would be red by R3.</p><p>Claim 12.5. K = {x 1 , x 2 , x 3 } Proof of the Claim. Suppose for a contradiction that there is an additional vertex x 4 in K. Without loss of generality, we may assume that x 4 is adjacent to x 1 or x 3 . Suppose first that x 4 is adjacent to x 1 . Then, x 4 has to be adjacent to at least one of q and x 2 , since, by Claim 12.3, x 2 q x 1 x 4 cannot be an induced P 4 . Adjacency to q leads to a triangle x 4 q x 1 , implying that x 1 and x 4 are coloured by R3, a contradiction. Therefore, x 4 is adjacent to x 2 . This implies that K 2,3 is a spanning subgraph of K ∪{q}. Thus, K has to be monochromatic and coloured red by R5, a contradiction. Consider now the case where x 4 is not adjacent to x 1 . Hence, x 4 is adjacent to x 3 . Then, x 4 is adjacent to q or to both x 1 and x 2 , since, by Claim 12.3, neither q x 1 x 3 x 4 nor q x 2 x 3 x 4 are induced P 4 s. Note that by assumption x 4 is not adjacent to x 1 . If x 4 is adjacent to q, then K ∪ {q} has again K 2,3 as a spanning subgraph and by R5, we get a contradiction. Thus, in all cases, we get a contradiction, and the claim holds. ⊳ From Claim 12.5 we got that K = {x 1 , x 2 , x 3 }. In the following, we analyse the blue neighbours of K. Let y i be the blue neighbour (if it exists) of x i for i ∈ {1, 2, 3}. Note that y 1 , y 2 and y 3 are not necessarily different. Depending on the blue neighbours, we colour such a component K as follows:</p><p>1. If x 1 and x 2 both have a blue neighbour, colour K red. 2. If exactly x 1 and x 3 have a blue neighbour, colour x 2 red and x 1 , x 3 blue. 3. If exactly x 2 and x 3 have a blue neighbour, colour x 1 red and x 2 , x 3 blue. 4. If exactly x 1 has a blue neighbour, colour x 2 red. 5. If exactly x 2 has a blue neighbour, colour x 1 red. 6. If exactly x 3 has a blue neighbour, colour x 1 red. Claim 12.6. G has a minimum red-blue (R, B)-colouring before applying the aforementioned colouring rules if and only if it has one afterwards.</p><p>Proof of the Claim. 1. If x 3 is coloured blue, then so are x 1 and x 2 . Thus, q has two blue neighbours, a contradiction. Hence, we can safely colour x 3 red. Then x 1 and x 2 have to be coloured red, too. 2.-3. If exactly y 1 (or y 2 by symmetry) and y 3 exist then there are 2 ways of colouring K. Either we colour K red or we only colour x 2 red and x 1 and x 3 blue. Both colourings contribute 2 to the value of the red-blue colouring. If we choose the latter colouring, y 1 and y 3 still have the possibility of having a red neighbour at another point in the colouring process. Since q, x 1 , x 2 and x 3 do not have uncoloured neighbours outside of K, this rule is safe. 4.-6. In all three cases, we can colour every vertex in K red. This leads to a contribution of 1 to the total value of the colouring and the blue neighbour is prevented from having a red neighbour outside of K. Alternatively, we can choose the following colourings. 4. Colour x 2 red and x 1 and x 3 blue. 5. Colour x 1 red and x 2 and x 3 blue. 6. Colour x 1 red and x 2 and x 3 blue.</p><p>In each case, the colouring contributes 2 to the total value and allows the blue neighbour of K to have a red neighbour outside of K. Note further, that in all three cases, there is one vertex (x 2 in Case 1, x 1 in Case 2 and 3) which is red in both possible colourings. Thus, we may safely colour this vertex red.</p><p>⊳ After the application of the above rules, we apply R1 and discard the branch if we get a no-answer. Otherwise, every component K considered in this case got partially coloured and we are left with connected components of size 2 where both vertices have a private red neighbour and one vertex has a blue neighbour. This ends the case where K has a red neighbour adjacent to at least two vertices in K and we proceed with the next case.</p><p>Case 2: Every red neighbour of K is adjacent to exactly one vertex in K. Suppose first that K has exactly one red neighbour. Recall that K has at least 1 blue neighbour, since otherwise K would be red by R4. Thus, any colouring of K contributes at least 1 to the total value of the red-blue colouring. Recall further that any red neighbour of K has uncoloured neighbours only in K. Therefore, we colour K blue, implying that it contributes exactly 1 to the total value and does not affect the colouring of the other vertices.</p><p>Consider now the case where K has at least 2 red neighbours q 1 , q 2 . Let x 1 , x 2 ∈ K such that q 1 is adjacent to x 1 and q 2 is adjacent to x 2 . Since x 1 and x 2 are both in K, there is a path in K connecting them. Thus, if x 1 and x 2 are not adjacent, P ′′ = q 1 x 1 . . . x 2 is an induced P 4 and thus, by Claim 12.3, P ′ + P ′′ is an induced P 6 + P 4 , a contradiction. Hence, x 1 and x 2 are adjacent. Since for the same reason, q 1 x 1 x 2 q 2 may not be an induced P 4 either, and any edge x i q j , i, j ∈ {1, 2} would result in a triangle with one coloured vertex (impossible by R3), there must be an edge between q 1 and q 2 . Claim 12.7.</p><formula xml:id="formula_18">K = {x 1 , x 2 }.</formula><p>Proof of the Claim. Suppose for a contradiction that there is a vertex x 3 ∈ V (K) adjacent to x 1 . Since q 2 q 1 x 1 x 3 cannot be an induced P 4 , there is an edge from x 3 to q 1 or q 2 , a contradiction since, by assumption, both q 1 and q 2 only have one uncoloured neighbour. The case where x 3 is adjacent to x 2 follows by symmetry. ⊳ Let y 1 and y 2 be the unique, blue, not necessarily different neighbours of x 1 and x 2 (if they exist). If both y 1 and y 2 exist, there are two possibilities to colour x 1 and x 2 . Either both red or both blue, in each case contributing 2 to the total value of the colouring. If both are blue, y 1 and y 2 may have a red neighbour in another connected component. Recall that q 1 and q 2 do not have other uncoloured neighbours. Hence, we can safely colour K blue.</p><p>Thus, every component K considered in this case either got coloured or is of size 2 where both vertices have a private red neighbour and exactly one vertex has a blue neighbour.</p><p>Colouring the remaining vertices Recall that Z is the set of uncoloured vertices. Note that we are left with two types of connected components of G[Z]. We have connected components of size 2 with neighbours as depicted in Figure <ref type="figure" target="#fig_0">4</ref> (left) and connected components of size 1 with a red and a blue neighbour, see Figure <ref type="figure" target="#fig_0">4</ref> (right).</p><p>Let W = Z ∪ N (Z) and let H be the graph with</p><formula xml:id="formula_19">V (H) = W and E(H) = {uu ′ ∈ E(G)|u ∈ Z, u ′ ∈ W }.</formula><p>That is, H contains all edges of G with at least one uncoloured endvertex.</p><p>Note that if H consists of several connected components, their colourings do not influence each other. Therefore, we may consider the components separately and we assume in the following that H is connected. Recall that by Claim 12.4, every red vertex which is adjacent to a component K of G[Z] of size 2 has exactly one uncoloured neighbour which is inside K. We say that a coloured vertex v has property Q if every uncoloured neighbour of v has to be coloured with the same colour as v.</p><p>Claim 12.8. Suppose that a coloured vertex v satisfies Q, then we can colour the whole component of H containing v by propagation or conclude that G has no red-blue colouring which extends the current partial colouring.</p><p>Proof of the Claim. Let v be a coloured vertex satisfying Q. Let T be the set of uncoloured neighbours of v. Suppose that there is a vertex w in T with a second coloured neighbour u. By R2, u has the opposite colour of v. Thus, if we colour w according to Q, that is, with the colour of v, u has a neighbour of the other colour and thus all other neighbours of u have to have the same colour as u and Q is satisfied for u.</p><p>Thus, if a vertex v satisfies Q, then, after propagation, the coloured vertices at distance 2 of v satisfy Q and the uncoloured neighbours of v are coloured. We continue the propagation exhaustively and either obtain a contradiction to the validity of the colouring and discard the branch, or the whole component is coloured. ⊳ Claim 12.9. Let T be a connected component of G[Z] of size 2. If we colour T red and propagate the colouring, then either we obtain a valid red-blue colouring of H or we conclude that T is be blue in any valid red-blue colouring of H.</p><p>Proof of the Claim. Let T be a connected component of G[Z] of size 2. We colour the vertices of T red. Then, the neighbours of T satisfy property Q. For the two red neighbours of T , this follows immediately from Claim 12.4. For the blue neighbour of T , this follows since T gets coloured red. The claim follows from application of Claim 12.8.</p><formula xml:id="formula_20">⊳ Let k = |{C|C is a connected component of size 2 of G[Z]}| be the number of connected components of size 2 in G[Z]. If k = 0, we conclude by applying Lemma 3.</formula><p>Otherwise, let T ∈ H be a connected component of size 2. First, we colour T red. By Claim 12.9, we either obtain in polynomial time a valid red-blue colouring and remember its value or we get that no such colouring exists and discard the branch. Second, we colour T blue and propagate the resulting colouring. Then only k − 1 components of size 2 remain and we can repeat the same process and try to colour in red the uncoloured vertices of some component of size 2.</p><p>If at any point in our algorithm we discard a branch, we consider the next. For every valid red-blue colouring which we obtain, we remember its value and output the colouring with the minimum value. The correctness of our algorithm follows from its description. In the following, we analyse its run-time.</p><p>By Lemma 1, the propagation of a colouring can be done in polynomial time. We consider O(n 48 ) branches, each of which can be processed in polynomial time. Therefore, the run-time of our algorithm is polynomial.</p><p>⊓ ⊔ Theorem 13. Minimum Matching Cut is polynomial-time solvable for P 7free graphs.</p><p>Proof. Let G be a P 7 -free graph. We assume that G is connected. We apply Observation 1 and search for a minimum red-blue colouring of G. Theorem 5 states that G has either a dominating P 5 or a dominating connected P 5 -free subgraph and that such a subgraph can be found in polynomial time. If G has a dominating P 5 , we have a dominating set of bounded size and apply Lemma 2.</p><p>In polynomial time, we either find a minimum red-blue colouring or conclude that no such colouring exists. Hence, we may assume that G has a dominating set D such that G[D] is connected and P 5 -free. By applying Theorem 5 again, we obtain that G[D] either has a dominating P 3 or a connected dominating P 3 -free subgraph. Note that a connected P 3 -free subgraph is either a monochromatic clique, that is, a clique of size 1 or at least 3 or a clique of size 2, that is, a P 2 . We will distinguish between these two cases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Case 1: G[D] is dominated by a monochromatic clique</head><p>Let K be a clique of size 1 or at least 3 in G which dominates G[D]. Hence, every vertex of G is at distance at most 2 from K. Without loss of generality, we may colour K red. Consider first the case where all neighbours of K are coloured red. Then, N (K) ∪ K dominates G and we apply Lemma 6. We either obtain a valid red-blue colouring of G and remember its value, or conclude that no such colouring exists and discard the branch. Otherwise, if N (K) ∪ K is not monochromatic, there is at least one blue vertex adjacent to K. We branch over all O(n) options to colour a neighbour of K blue and propagate the colouring using R1-R5. If we get a no-answer, we discard the branch, otherwise, we continue. Let R (resp. B) be the set of red (resp. blue) vertices and let Z be the set of uncoloured vertices. Observe that both R and B are connected in G.</p><p>If every connected component of G[Z] is of size 1, we apply Lemma 3. We either obtain a minimum red-blue (R, B)-colouring of G and remember its value, or conclude that no such colouring exists and discard the branch. Therefore, we may assume that there is a connected component C of G[Z] of size at least 2. Recall that by R4, C has to be adjacent to B. Let x, y ∈ C such that x and y are adjacent and x is adjacent to a blue vertex b ∈ B. Let β be a blue neighbour of K which minimises dist B (b, β). Let b p 1 . . . p ℓ β be the shortest path in B from b to β. Note first that due to R3, not both of x and y may be adjacent to the same vertex in p 1 , . . . , p ℓ . This allows us to assume that neither x nor y is adjacent to any of p 1 , . . . , p ℓ , otherwise, if p j , j ∈ {1, . . . , ℓ}, is adjacent to x or y, after potentially changing the role of x and y, we replace b by p j . Let α ∈ K be the red neighbour of β.</p><p>We claim that the path y x b p 1 . . . p ℓ β α is induced. Note first that b p 1 . . . p ℓ β is an induced path since it was chosen as a shortest blue path from b to β. By construction, x and y are not adjacent to any of p 1 , . . . , p ℓ and y is not adjacent to b. Since β and α are neighbours of different colour, their other neighbours are coloured alike and neither x nor y can be adjacent to them. In addition, α cannot have a second blue neighbour in α, p 1 , . . . , p ℓ . Hence, the path is induced. Note that ℓ ≤ 1, since otherwise y x b p 1 . . . p ℓ β α is an induced P 7 , a contradiction. Claim 13.1. If y is coloured blue we can find in polynomial time a minimum red-blue (R, B)-colouring of G or conclude that no such colouring exists.</p><p>Proof of the Claim. We colour y blue and propagate the colouring. Hence, by R2, x is blue as well. We branch over the O(n 4 ) colourings of the neighbours of b, x, y and p 1 (if it exists).</p><p>Let Q ⊆ R be the set of red neighbours of b, x, y and p 1 (if it exists). Note that due to R2, |Q| ≤ 4. Note that all neighbours of Q except b, x, y and p 1 are red by propagation. Let S ⊆ R be the set of vertices of R \ Q that are not in the same connected component as α in G[R \ Q]. Note that S might be empty. We partition G[Z]. Let C 1 ⊆ Z be the set of uncoloured vertices with a red neighbour in S. Let C 2 ⊆ Z be the set of uncoloured vertices with a red neighbour in R \ (Q ∪ S). Let C 3 be the set of uncoloured vertices without a red neighbour. Recall that the neighbours of Q have already been coloured.</p><p>Suppose for a contradiction that C 2 is not empty. Let u ∈ C 2 and let u c 1 . . . c k α be the shortest path using vertices in R \ (Q ∪ S) from u to α. Since u ∈ C 2 , such a path exists and since the neighbours of α are coloured, k ≥ 1. Note further that the path is induced, since it is a shortest path. We claim that P ′ = u c 1 . . . c k α β (p 1 ) b x y is an induced path of length at least 7. We already saw that α β (p 1 ) b x y is an induced path. By construction, u c 1 . . . c k α is also an induced path. The red neighbours of b, x, y and p 1 are in Q and all their neighbours are coloured. Hence, they are not adjacent to any vertex of c 1 , . . . , c k or u. Since the neighbourhood of β is coloured blue except for α, β is neither adjacent to u nor to any of c 1 , . . . , c k . Hence P ′ is an induced path of length at least 7, a contradiction. It follows that C 2 is empty.</p><p>Suppose for a contradiction that C 3 is not empty. Let u ∈ C 3 be an uncoloured vertex without a red neighbour. Since u is at distance at most 2 of K, there exist w, z such that z ∈ K and w is adjacent to both u and z. If w is blue, u would have been coloured by R2. Hence, w is uncoloured and, as z / ∈ S, we get that w ∈ C 2 . Since C 2 is empty, this is a contradiction. It follows that C 3 is empty.</p><p>Hence, Z = C 1 and is dominated by R. We apply Lemma 6 and either obtain a minimum red-blue (R, B)-colouring and remember its value or conclude that no such colouring exists and discard the branch. ⊳ We first check whether colouring y blue leads to a valid red-blue (R, B)-colouring of G in which case we remember its value. Note that this can be done in polynomial time by Claim 13.1. Then, we colour y red and propagate the colouring. The number of uncoloured vertices decreased and we repeat the process from the point where we checked whether all connected components of G[Z] have size 1. Whenever we obtain a valid red-blue colouring, we remember its value. Whenever we discard a branch, we consider the next. Initially, we consider O(n) branches. In every iteration the number of uncoloured vertices decreases and we only recurse in the case where y is red. Thus, we recurse at most O(n) times and for each step in the recursion, we consider O(n 4 ) sidebranches while considering the case where y is blue, resulting in O(n 6 ) branches in total. Since the application of Lemma 3 and the propagation can be done in polynomial time, our algorithm runs in polynomial time in the case where G[D] is dominated by a monochromatic clique.</p><p>Case 2: G[D] is dominated by a P 2 or a P 3 Let P be a path in G dominating G[D] which is a P 2 or a P 3 . Then, every vertex of G is at distance at most 2 of P . Let P = x 1 x 2 if D is dominated by a P 2 or else P = x 1 x 2 x 3 . We branch over all colourings of P . We denote by R (resp. B) the set of red (resp. blue) vertices. If P is monochromatic, we apply Lemma 7 and either find a minimum red-blue (R, B)-colouring and remember its value or conclude that no such colouring exists and discard the branch. We now assume that P is not monochromatic. By symmetry we may assume that x 1 is red and both x 2 and x 3 (if it exists) are blue. We branch over all O(n 3 ) colourings of N (P ). Let Z be the set of uncoloured vertices of G. If every vertex of Z is adjacent to a blue vertex, then B dominates Z and we apply Lemma 6. If we get a valid red-blue (R, B)-colouring of G, we remember its value, otherwise we get that no such colouring exists and discard the branch.</p><p>Let u ∈ Z be a vertex which is not adjacent to any vertex in B. As u is at distance at most 2 of P and the neighbourhood of P is coloured, there is a vertex r ∈ R which is adjacent to both u and x 1 . Let C be the connected component of u in G[Z]. Due to the application of R4, we know that C is adjacent to B. Since u is not adjacent to B, it has a neighbour v ∈ C, see Figure <ref type="figure" target="#fig_5">5</ref>. Claim 13.2. P ′ = v u r x 1 x 2 x 3 is an induced path.</p><p>Proof of the Claim. To see this, recall that x 1 x 2 x 3 is an induced P 3 . Since u and v are both uncoloured, they cannot be adjacent to P and at most one can be adjacent to r. Further, if r was adjacent to x 2 or x 3 , u would have been coloured red. Thus, P ′ is an induced path. ⊳ Claim 13.3. If v is coloured red, we can find in polynomial time a minimum red-blue (R, B)-colouring of G or conclude that no such colouring exists.</p><p>Proof of the Claim. We colour v red and propagate the colouring. Hence, by R2, u is red as well. We branch over the O(n 3 ) colourings of the neighbours of r, u and v. If Z is dominated by R we apply Lemma 6. We either obtain a red-blue (R, B)-colouring and remember its value or conclude that no such colouring exists and discard the branch. Let w ∈ G[Z] be not adjacent to R. As w is at distance 2 of P , there is a vertex b adjacent to both P and w, see Figure <ref type="figure" target="#fig_5">5</ref>. We know that b ∈ B, since N (P ) is coloured and b is not red. Further, b cannot be adjacent to any vertex in R, otherwise w would have been coloured. If b is adjacent to x 2 , then v u r x 1 x 2 b w is an induced P 7 , a contradiction. Otherwise, x 3 exists and b is adjacent to only x 3 in P , then v u r x 1 x 2 x 3 b is an induced P 7 , a contradiction. ⊳ We first check whether colouring v red leads to a valid red-blue colouring, in which case we remember its value. Then, we colour v blue and propagate the colouring. Now the number of uncoloured vertices decreased and we check again whether B dominates Z and otherwise find another connected component of G[Z] of size at least 2, try to colour the vertex in the role of v red and repeat the whole process. Whenever we discard a branch, we consider the next. Whenever we obtain a valid red-blue colouring, we remember its value. In every iteration, the number of uncoloured vertices decreases and we only recurse in the case where v is blue. Thus, we recurse at most O(n) times, and for each step in the recursion, we consider O(n 3 ) sidebranches in the case where v is red. Together with the initial branching to colour the neighbours of P , we consider in total O(n 7 ) branches. Since the application of Lemma 6 and the propagation can be done in polynomial time, our algorithm runs in polynomial time in the case where G[D] is dominated by a P 2 or P 3 .</p><p>The correctness of our algorithm follows from its description. If we found a valid red-blue colouring, we output the smallest value of any valid red-blue colouring we obtained, otherwise we return that no such colouring exists. Since in both cases our algorithm runs in polynomial time, the total running time is polynomial.</p><p>⊓ ⊔</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Hardness Results</head><p>For our hardness results, we reduce from Vertex Cover. A vertex cover is a set S of vertices such that every edge is incident to a vertex of S. In the problem Vertex Cover, we are given an instance (G, k) and ask whether G has a vertex cover of size k. The problem Vertex Cover is well known to be NP-complete, see e.g. <ref type="bibr" target="#b11">[12]</ref>.</p><p>Theorem 14. Minimum Matching Cut is NP-hard for 3P 3 -free graphs of radius 2 and diameter 3.</p><p>Proof. Let (G, k) be an instance of Vertex Cover. We construct a graph G ′ from G, consisting of vertex gadgets, edge gadgets, and cover gadgets (which will ensure that every edge of G is covered) as follows. For each vertex v ∈ V (G) we As a last step, we add vertices a to C and b to C ′ together with the edge ab. Note that when adding vertices to C, C ′ and C v , for v ∈ V (G), we add edges such that these sets remain cliques.</p><formula xml:id="formula_21">••• ••• Cv 1 ••• C ′ v 1 ••• ••• Cv 2 ••• C ′ v 2 a b C C ′</formula><p>We first show that G ′ is 3P 3 -free and has radius 2 and diameter 3. To see that G ′ is 3P 3 -free, note first that G ′ − (C + C ′ ) is a disjoint union of cliques and thus contains no induced path consisting of more than 2 vertices. Hence, every induced P 3 in G ′ contains at least one vertex of one of the cliques C and C ′ . Since no two induced paths can contain a vertex in the same clique, we conclude that G ′ is 3P 3 -free. The distance from a to any vertex in C and to b is one. Since every vertex in the cliques C v and C ′ v for any v ∈ V (G) is adjacent to a vertex in C, their distance to a is two. Further, since the distance of any vertex in C ′ to b is one, the distance to a is two and thus G ′ has radius 2. The distance between any two vertices in C and C ′ is at most 3, which also holds for any two vertices in G ′ − (C + C ′ ). Thus, the diameter of G ′ is at most 3.</p><p>We claim that G has a vertex cover of size k if and only if G ′ has a matching cut of size µ satisfying</p><formula xml:id="formula_22">2|V (G)| + (1 + |E(G)|)k + 1 ≤ µ ≤ 2|V (G)| + (1 + |E(G)|)k + |E(G)| + 1 (1)</formula><p>Note that by Observation 1 this is the case if and only if G ′ has a red-blue colouring of value µ.</p><p>First, suppose that G has a vertex cover S of size k. We construct a red-blue colouring as follows. We colour C red and We compute the value of the colouring. Every vertex gadget has two bichromatic edges, so the vertex gadgets contribute a value of 2|V (G)|. Every edge gadget contains 0 or 1 bichromatic edge, thus their contribution is between 0 and |E(G)|. For the cover gadgets, if a vertex v ∈ V (G) is contained in S, then the corresponding cover gadget contributes a value of |E(G) + 1| and otherwise contributes a value of 0. Finally, the edge ab contributes one to the value of the colouring. In total, the value µ of the red-blue colouring satisfies Equation <ref type="bibr" target="#b0">(1)</ref>.</p><formula xml:id="formula_23">C ′ blue. Let v ∈ V (G). If v ∈ S then colour C v blue</formula><p>We now consider a fixed red-blue colouring of G ′ of value µ satisfying Equation (1) for some k ∈ N. Note first that the cliques C, C ′ , and C v and C ′ v for all v ∈ V (G) are monochromatic in any valid red-blue colouring of G ′ . Proof of the Claim. Suppose that both are coloured the same, say both are red. Then the blue vertex v ′ ∈ C ′ , which is adjacent to one vertex of each of C v and C ′ v , has two red neighbours, a contradiction. ⊳ Thus, each vertex gadget contributes a value of 2 in every valid red-blue colouring of G ′ . Further, every edge gadget contributes a value of at most 1, since its vertex in C has at most one neighbour of the other colour. Also, the edge ab is bichromatic and thus, contributes a value of 1.</p><p>Without loss of generality and due to Claim 14.1 we may assume that C is red and C ′ is blue. We define a set S containing all vertices v ∈ V (G) such that C v is coloured blue.</p><p>Note that a cover gadget for some v ∈ V (G) contributes It remains to show that S is a vertex cover of G. Consider an edge uv ∈ E(G). S is a vertex cover if at least of u and v is in S. That is, at least one of C u and C v has to be blue. Suppose that this is not the case, that is, both C u and C v are red and thus, by Claim 14.2 both C ′ u and C ′ v are blue. Since they are contained in an edge gadget and thus have a common red neighbour in C, this contradicts the validity of the colouring.</p><p>⊓ ⊔</p><p>If we replace the cliques by complete bipartite graphs, we obtain a similar result for bipartite graphs. However, the radius and diameter increase by 1 and the construction is not 3P 3 -free. Thus, G ′ is clearly bipartite since each edge connects a vertex in A with a vertex in B. To see that G ′ has radius 3 and diameter 4 note first that this is an increase of 1 compared to the radius and diameter of G. Consider a path in G which is used to show that the distance between u and v in G is bounded. Note that the distance between u a and one of v a and v b equals dist(u, v). Since v a and v b are adjacent, we get that dist(u a , v a ) ≤ dist(u, v) + 1 and dist(u a , v b ) ≤ dist(u, v) + 1. By symmetry, the same holds for u b and thus, G ′ has radius 3 and diameter 4.</p><p>We claim that H has a vertex cover of size k if and only if G ′ has a matching cut of size µ ′ = 2µ where</p><formula xml:id="formula_24">2|V (G)| + (1 + |E(G)|)k + 1 ≤ µ ≤ 2|V (G)| + (1 + |E(G)|)k + |E(G)| + 1</formula><p>as in the proof of Theorem 14. Note that by Observation 1 this is the case if and only if G ′ has a red-blue colouring of value µ ′ .</p><p>First, suppose that H has a vertex cover S of size k. We construct a redblue colouring of G of value µ using the arguments from Theorem 14. For every vertex u ∈ V (G), we colour u a and u b in V (G ′ ) with the same colour as u. This immediately leads to a valid red-blue colouring of G ′ of value 2µ = µ ′ since every bichromatic edge uv in G connects two vertices u and v which do not belong to the same clique and each such edge corresponds to two edges u a v b and u b v a in G ′ .</p><p>Consider now a fixed red-blue colouring of G ′ of value µ ′ . Then, two vertices u a , u b corresponding to the same vertex u in G are coloured the same since they are contained in a complete bipartite graph with partition classes of size at least 3. Thus, the red-blue colouring of G where a vertex u has the same colour as u a in G ′ is a red-blue colouring of G of value µ. Using the arguments from Theorem 14 we obtain a vertex cover S of H of size k.</p><p>⊓ ⊔</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>Combining our results with results from <ref type="bibr" target="#b4">[5]</ref> and <ref type="bibr" target="#b7">[8]</ref>, we obtain the following partial complexity classification for Minimum Matching Cut and we can update the classification for Matching Cut.</p><p>Theorem 16 <ref type="bibr">([5,8]</ref>). For a graph H, Minimum Matching Cut on H-free graphs is polynomial-time solvable if H ⊆ i sP 2 + S 1,1,2 , sP 2 + P 7 , or sP 2 + P 6 + P 4 , for some s ≥ 0, and -NP-hard if H ⊇ i 3P 3 , K 1,4 , C r , r ≥ 3, or H * i , i ≥ 1.</p><p>Theorem 17 <ref type="bibr">([5,8,15,19,21,22]</ref>). For a graph H, Matching Cut on H-free graphs is polynomial-time solvable if H ⊆ i sP 3 + S 1,1,2 , sP 3 + P 6 + P 4 or sP 3 + P 7 , for some s ≥ 0, and -NP-complete if H ⊇ i K 1,4 , P 14 , 2P 7 , 3P 5 , C r , r ≥ 3, or H * i , i ≥ 1.</p><p>In both cases, the computational complexity remains open only for a constant number of graphs H. In all open cases, every connected component of H is either a path or a subdivided claw. This leads to the following natural open problem.</p><p>Open Problem 1 Complete the complexity dichotomies for Minimum Matching Cut and Matching Cut on H-free graphs. Also, the computational complexity of graphs of bounded maximum degree has been investigated for different variants of Matching Cut. While Maximum Matching Cut is known to be NP-hard for graphs of maximum degree 3 <ref type="bibr" target="#b19">[20]</ref>, every graph with at least 7 vertices and maximum degree 3 has a matching cut. This leads to our second open problem.</p><p>Open Problem 2 Determine the complexity of Minimum Matching Cut on graphs of maximum degree 3.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Theorem 4 .</head><label>4</label><figDesc>For an integer d ≥ 1, Minimum Matching Cut for bipartite graphs of diameter d is polynomial-time solvable if d ≤ 3 and NP-complete if d ≥ 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Claim 6 . 1</head><label>61</label><figDesc>All connected components of G[Z] containing a vertex without a blue neighbour are adjacent to b. Proof of the Claim. Let C ′ be a connected component of G[Z] containing a vertex without a blue neighbour and such that C ′ is not adjacent to b. Note that this implies that C ′ consists of at least 2 vertices. Let b ′ ∈ B be a blue neighbour of C ′ which exists by R4. If C ′ has several blue neighbours, we choose the one with the smallest distance to b. Let b = b 0 . . . b ℓ = b ′ , for ℓ ≤ 6 be the shortest blue path between b and b</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 :</head><label>2</label><figDesc>Fig. 2: The connected components C and C ′ of G[Z].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Let</head><label></label><figDesc>C be the currently chosen connected component of G[Z]. Note that by R4, every connected component of G[Z] has a blue neighbour. Let w be a blue neighbour of C in the blue component B w . Suppose first that we have not chosen B w before. Then s 1 and s 2 can each have at most one neighbour of the same colour, otherwise they would have been coloured by R2. Further, C is P 4 -free and has, by Lemma 8, at most O(n) red-blue colourings.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4 :</head><label>4</label><figDesc>Fig. 4: A component of size 2 (left) and a component of size 1 (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 5 :</head><label>5</label><figDesc>Fig. 5: The path P together with a component C of size at least 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 6 :</head><label>6</label><figDesc>Fig.6: The graph G ′ constructed for a two adjacent vertices v 1 and v 2 . The given colouring indicates that v 1 is in the vertex cover S while v 2 is not.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Claim 14 . 1 .Claim 14 . 2 .</head><label>141142</label><figDesc>The cliques C and C ′ have different colours in every valid red-blue colouring of G ′ . Proof of the Claim. Suppose for a contradiction that they have the same colour, say C and C ′ are both red. Then for every v ∈ V (G) the vertices in C v and C ′ v that are adjacent to both C and C ′ have each two red neighbours and are thus red. Hence, the cliques C v and C ′ v are all red, and thus all vertices of G ′ are red, a contradiction. ⊳ For any v ∈ V (G), the cliques C v and C ′ v different colours in every valid red-blue colouring of G ′ .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>( 1 +</head><label>1</label><figDesc>|E(G)|) bichromatic edges if and only if the clique C v is blue, that is, if and only if v ∈ S. From Equation (1) we immediately get(1 + |E(G)|)k ≤ µ − 2|V (G)| − 1 ≤ (1 + |E(G)|)k + |E(G)| and thus there are µ−2|V (G)|−1 1+|E(G)| = k vertices in S.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Theorem 15 .</head><label>15</label><figDesc>Minimum Matching Cut is NP-hard for bipartite graphs of radius 3 and diameter 4.Proof. Let (H, k) be an instance of Vertex Cover. Let G be the graph constructed for this instance in the proof of Theorem 14. We construct a bipartite graph G ′ with partition classes A and B as follows. Replace every clique C of size k by a complete bipartite graph C ′ with partition classes each of size k. We say that a vertex u ∈ V (C) corresponds to two vertices inV (C ′ ), u a ∈ A∩V (C ′ ) and u b ∈ B ∩ V (C ′ ). Let u, v ∈ V (G)and let u a , u b , v a and v b be the corresponding vertices. If uv ∈ E(G) we add the edges u a v b and u b v a .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Theorem 5([4]). Let G be a connected P k -free graph, for k ≥ 4. Then G either has a dominating P k−2 or a dominating P k−2 -free connected subgraph and such a subgraph can be found in polynomial time.</figDesc><table><row><cell cols="2">R dominates Z. Hence, every connected component of G[Z] is monochromatic</cell></row><row><cell cols="2">in every valid red-blue (R, B)-colouring of G. To see this, note that a blue ver-</cell></row><row><cell cols="2">tex with a red neighbour in G[Z] would have a second red neighbour in R, a</cell></row><row><cell>contradiction.</cell><cell></cell></row><row><cell cols="2">Lemma 4 ([19]). Let G be a connected graph with a red-blue (R, B)-colouring,</cell></row><row><cell cols="2">for connected sets R, B ⊆ V . If R or B dominates the uncoloured vertices, it is</cell></row><row><cell cols="2">possible to check in polynomial time if G has a valid red-blue (R, B)-colouring.</cell></row><row><cell cols="2">Lemma 5. Let G be a graph with a red-blue (R, B)-colouring and let w be an</cell></row><row><cell cols="2">uncoloured vertex. We colour w and propagate the colouring. If the set of un-</cell></row><row><cell cols="2">coloured vertices is dominated by the set of coloured vertices, then we do not</cell></row><row><cell>create an additional coloured component.</cell><cell></cell></row><row><cell cols="2">Proof. Let v be a coloured neighbour of w. If we colour w the same as v, we</cell></row><row><cell cols="2">clearly do not get an additional blue or red component. Otherwise, assume with-</cell></row><row><cell cols="2">out loss of generality that we colour w blue and v is red and that w has no blue</cell></row><row><cell cols="2">neighbour. Let Z be the set of uncoloured vertices and let C be the connected</cell></row><row><cell cols="2">component of G[Z] containing w. By propagation of the colouring, all uncoloured</cell></row><row><cell cols="2">neighbours of w get coloured blue. If any of their coloured neighbours were blue,</cell></row><row><cell cols="2">we did not create an additional blue component. Otherwise, all coloured neigh-</cell></row><row><cell cols="2">bours of N (w) are red and by propagation, N (N (w)) will be coloured blue. This</cell></row><row><cell cols="2">propagation continues until we reach a vertex in C with a blue neighbour. Note</cell></row><row><cell cols="2">that such a vertex always exists by R4. It follows that regardless of the colour</cell></row><row><cell>of w we do not create an additional coloured component.</cell><cell>⊓ ⊔</cell></row><row><cell cols="2">Lemma 6. Let G = (V, E) be a connected P 7 -free graph with a red-blue (R, B)-</cell></row><row><cell cols="2">colouring, R, B ⊆ V and G[R] and G[B] connected. Let Z be the set of uncoloured</cell></row><row><cell cols="2">vertices. If Z is dominated by R or B, then we can find in polynomial time a</cell></row><row><cell>minimum red-blue colouring of G or decide that no such colouring exists.</cell><cell></cell></row><row><cell cols="2">Proof. Let B, R be the connected sets of blue and red vertices of G. Let Z be</cell></row><row><cell cols="2">the set of uncoloured vertices. We may assume without loss of generality that</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Thus, w is connected by a red path to a red component of G and we did not create a new coloured component. ⊳ Blue Coast Processing We repeat the following steps until we hit in Step 2 the same blue component a second time. Note that this requires at most 7 iterations, since G has at most 6 blue components. In the case where no connected component of size at least 2 remains in G[Z], we apply Lemma 3 and either discard the branch or found a valid red-blue colouring.</figDesc><table /><note>1. Pick a connected component of G[Z] of size at least 2. 2. Pick a blue neighbour w of this component. 3. Let s 1 , s 2 ∈ C such that s 1 w, s 1 s 2 ∈ E(G). Let q 1 (resp. q 2 )be the only red neighbour of s 1 (resp. s 2 ) and b 2 the only blue neighbour of s 2 , if they exist. 4. Branch over all O</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>and C ′ v red, otherwise colour C v red and C ′ v blue. To see that this colouring is valid, note first that every vertex has at most two neighbours outside of the clique in which it is contained. Let v ∈ C be a vertex contained in a vertex gadget. Then, since C v and C ′ v are coloured differently, v has at most one blue neighbour. By the same argument, a vertex v ′ ∈ C ′ contained in a vertex gadget has at most one red neighbour. Every vertex in C v and C ′ v has at most one neighbour in C and one in C ′ , so regardless of its colour it has at most one neighbour of the other colour. Consider a vertex e ∈ C, corresponding to an edge e = uv of G. Since S is a vertex cover, at least one of u and v is contained in S and thus at least one of C ′ u and C ′ v is red. All other vertices in C or C ′ have at most one neighbour outside of their clique.</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgement The authors thank Van Bang Le for his valuable contributions to Theorem 11. The authors further thank Clément Dallard, Daniel Paulusma, and Bernard Ries for fruitful discussions.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Felicia Lucke is supported by the EPSRC (Grant No. EP/X01357X/1) and Jannik Olbrich by the Deutsche Forschungsgemeinschaft (DFG) (Grant No. OH 53/7-1).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The complexity of the Matching-Cut problem for planar graphs and other graph classes</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">S</forename><surname>Bonsma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Graph Theory</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="page" from="109" to="126" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Matching cutsets in graphs of diameter 2</title>
		<author>
			<persName><forename type="first">M</forename><surname>Borowiecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Jesse-Józefczyk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">407</biblScope>
			<biblScope unit="page" from="574" to="582" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The complexity of the Perfect Matching-Cut problem</title>
		<author>
			<persName><forename type="first">V</forename><surname>Bouquet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Picouleau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Graph Theory</title>
		<imprint>
			<biblScope unit="volume">108</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="432" to="462" />
			<date type="published" when="2025">2025</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A new characterization of P k -free graphs</title>
		<author>
			<persName><forename type="first">E</forename><surname>Camby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Schaudt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="page" from="205" to="217" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Recognizing decomposable graphs</title>
		<author>
			<persName><forename type="first">V</forename><surname>Chvátal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Graph Theory</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="51" to="53" />
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Algorithm for solution of a problem of maximum flow in networks with power estimation</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">A</forename><surname>Dinic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Soviet Math. Doklady</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="1277" to="1280" />
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A note on Matching-Cut in Pt-free graphs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Feghali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Processing Letters</title>
		<imprint>
			<biblScope unit="volume">179</biblScope>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Matching cuts in graphs of high girth and H-free graphs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Feghali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Lucke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Paulusma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ries</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ISAAC 2023</title>
				<meeting>ISAAC 2023</meeting>
		<imprint>
			<date type="published" when="2023">2023</date>
			<biblScope unit="volume">283</biblScope>
			<biblScope unit="page">16</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Finding cuts of bounded degree: complexity, FPT and exact algorithms, and kernelization</title>
		<author>
			<persName><forename type="first">G</forename><surname>Gomes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Sau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">83</biblScope>
			<biblScope unit="page" from="1677" to="1706" />
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">On primitive graphs and optimal vertex assignments</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Graham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of the New York Academy of Sciences</title>
		<imprint>
			<biblScope unit="volume">175</biblScope>
			<biblScope unit="page" from="170" to="186" />
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An nˆ5/2 algorithm for maximum matchings in bipartite graphs</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Hopcroft</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Karp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on computing</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="225" to="231" />
			<date type="published" when="1973">1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Reducibility among Combinatorial Problems</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Karp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Complexity of Computer Computations</title>
		<imprint>
			<biblScope unit="page" from="85" to="103" />
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Contracting to a longest path in H-free graphs</title>
		<author>
			<persName><forename type="first">W</forename><surname>Kern</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Paulusma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ISAAC 2020</title>
				<meeting>ISAAC 2020</meeting>
		<imprint>
			<date type="published" when="2020">2020</date>
			<biblScope unit="volume">181</biblScope>
			<biblScope unit="page">18</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A complexity dichotomy for Matching Cut in (bipartite) graphs of fixed diameter</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">O</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">B</forename><surname>Le</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">770</biblScope>
			<biblScope unit="page" from="69" to="78" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Complexity results for matching cut problems in graphs without long induced paths</title>
		<author>
			<persName><forename type="first">H</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">B</forename><surname>Le</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. WG 2023</title>
				<meeting>WG 2023</meeting>
		<imprint>
			<date type="published" when="2023">2023</date>
			<biblScope unit="volume">14093</biblScope>
			<biblScope unit="page" from="417" to="431" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Maximizing matching cuts</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">B</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Lucke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Paulusma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ries</surname></persName>
		</author>
		<idno>CoRR abs/2312.12960</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The Perfect Matching Cut problem revisited</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">B</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Telle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">931</biblScope>
			<biblScope unit="page" from="117" to="130" />
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Matching cut and variants on bipartite graphs of bounded radius and diameter</title>
		<author>
			<persName><forename type="first">F</forename><surname>Lucke</surname></persName>
		</author>
		<idno>CoRR abs/2501.08735</idno>
		<imprint>
			<date type="published" when="2025">2025</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">On the complexity of Matching Cut for graphs of bounded radius and H-free graphs</title>
		<author>
			<persName><forename type="first">F</forename><surname>Lucke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Paulusma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ries</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">936</biblScope>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<author>
			<persName><forename type="first">F</forename><surname>Lucke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Paulusma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ries</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Dichotomies for Maximum Matching Cut: H-Freeness, Bounded Diameter, Bounded Radius. Proc. MFCS 2023</title>
				<imprint>
			<date type="published" when="2023">2023</date>
			<biblScope unit="volume">272</biblScope>
			<biblScope unit="page">15</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Finding matching cuts in H-free graphs</title>
		<author>
			<persName><forename type="first">F</forename><surname>Lucke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Paulusma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ries</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">85</biblScope>
			<biblScope unit="page" from="3290" to="3322" />
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Matching cutsets in graphs</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Moshi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Graph Theory</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="527" to="536" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<author>
			<persName><forename type="first">I</forename><surname>Rusu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Spinrad</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Forbidden subgraph decomposition</title>
				<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">247</biblScope>
			<biblScope unit="page" from="159" to="168" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
