<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Poster: Long PHP webshell files detection based on sliding window attention</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Zhiqiang</forename><surname>Wang</surname></persName>
							<email>wangzq@besti.edu.cn</email>
							<affiliation key="aff0">
								<orgName type="institution">Beijing Electronic Science &amp; Technology Institute</orgName>
								<address>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Haoyu</forename><surname>Wang</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Beijing Electronic Science &amp; Technology Institute</orgName>
								<address>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Lu</forename><surname>Hao</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Beijing Municipal Public Security Bureau</orgName>
								<address>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Poster: Long PHP webshell files detection based on sliding window attention</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">F741C993E929CCC2E6BE44CA08D52C30</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2025-03-04T16:36+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Webshell is a type of backdoor, and web applications are widely exposed to webshell injection attacks. Therefore, it is important to study webshell detection techniques. In this study, we propose a webshell detection method. We first convert PHP source code to opcodes and then extract Opcode Double-Tuples (ODTs). Next, we combine CodeBert and FastText models for feature representation and classification. To address the challenge that deep learning methods have difficulty detecting long webshell files, we introduce a sliding window attention mechanism. This approach effectively captures malicious behavior within long files. Experimental results show that our method reaches high accuracy in webshell detection, solving the problem of traditional methods that struggle to address new webshell variants and antidetection techniques.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>The webshell injection plays a vital role in the hacker attack chain, enabling the attacker to remotely control devices, acquire sensitive data, and further expand attack activities. Therefore, Detecting and removing webshells is an effective way to defend against attacks and ensure web security.</p><p>Traditional webshell detection methods <ref type="bibr">[1]</ref>, <ref type="bibr">[2]</ref> based on pattern matching usually rely on recognizing known features, including source code features, traffic features, dynamic function calls and other relevant features. However, as attack techniques evolve, the variability and obfuscation of webshells have become more prevalent. Attackers often use obfuscation, dynamic loading, encryption and decryption techniques to evade detection, making traditional detection methods inadequate for recognizing new types of webshells.</p><p>In this context, webshell detection methods using deep learning <ref type="bibr">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, including those based on source code or opcode, have become a research hotspot and have shown promising results. However, current deep learning-based webshell detection methods still face challenges <ref type="bibr" target="#b5">[6]</ref>. For datasets, publicly available datasets are outdated and do not contain the latest samples. Therefore, their performance in real-world environments for detecting may not be good. For data processing, a good data processing method is often more important than the detection model. The opcode-based detection methods typically extract only a single sequence of opcode instructions (called Opcode Single-Tuples) without effectively capturing low-level code features. The source code-based method is complicated for processing webshells that use anti-detection techniques. In addition, detecting long sequence files (such as complex dynamic encryption and decryption scripts or large files) is quite challenging. Methods such as sample slicing <ref type="bibr">[3]</ref> or TextRank <ref type="bibr" target="#b4">[5]</ref> are often used to reduce data size, which may result in some loss of code information or disruption of contextual relationships.</p><p>This study focuses on the PHP language because PHP is used by 75.1% of all the websites whose server-side programming language <ref type="bibr" target="#b6">[7]</ref>. To address the challenges, this study contribution includes (1) collating a new high-quality Webshell dataset, (2) proposing a PHP code data processing method to extract Opcode Double-Tuples(ODTs) including opcode instructions and operands instead of Opcode Single-Tuples(OSTs), (3) introducing a window attention mechanism to solve the long text problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. METHODOLOGY</head><p>The detection method consists of two steps. First, the PHP source code in the dataset is processed into ODTs. Second, using a sliding window attention mechanism, we combine the CodeBert model <ref type="bibr" target="#b7">[8]</ref> and the Fasttext model <ref type="bibr" target="#b8">[9]</ref> for feature representation and binary classification of the ODTs. Our dataset and processing code are publicly available: https://github.com/w-32768/PHP-Webshell-Detection-via-Opcode-Analysis </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Data processing</head><p>The dataset consists of PHP source code files containing 5001 webshell samples and 5936 benign PHP files. Firstly, we convert the PHP source code to the opcode. The opcode, generated by the Zend Engine in PHP, is a low-level abstraction of source code. As anti-detection techniques are mostly arXiv:2502.19257v1 [cs.CR] 26 Feb 2025 used at the source code level, we have a natural advantage in using opcode detection.</p><p>After obtaining the opcodes, a series of data processing steps are performed. We use expert knowledge to establish fine-grained processing rules, extracting high-value instructions for detection while excluding those of low relevance, thus reducing opcode length without compromising contextual semantics. Operands may be encoded by URL or Base64 encoding, making it difficult to determine their semantics. Therefore, we perform the decoding operation. The original string content is restored based on string feature recognition. After this extraction, we have the set of opcode instructions and operands, called Opcode Double-Tuples. Experimental comparisons show that, under the same detection model training on our dataset, ODTs achieve a 4.6% accuracy improvement compared to OSTs, confirming that our data processing method is advanced and professional.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Feature Representation and Binary Classification</head><p>After data processing, this study explores using the Code-Bert model and various embedding models for feature representation and binary classification of ODTs. The steps are as follows:</p><p>1) Feature Representation.</p><p>• CodeBert Model: The CodeBert Model is a widely used pre-trained language model optimized for code understanding tasks and pre-trained on PHP code. We input the ODTs into the CodeBert model to generate highdimensional feature vector representations that capture the semantic and syntactic information of the opcodes. </p><formula xml:id="formula_0">E = λE CodeBert + (1 − λ)E FastText<label>(1</label></formula><p>) E CodeBert and E FastText represent the feature vectors generated by CodeBert and FastText, respectively. λ is the weight coefficient, and its optimal value is determined through experimentation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) Sliding Window Attention Mechanism:</head><p>We introduce a sliding window attention mechanism to address the high computational complexity of global selfattention mechanisms for long opcode sequences. The opcode sequence is divided into multiple windows of size W with a stride of Sr(Sr &lt; W ). Specifically, Self-attention is calculated independently within each window. The global feature representation is obtained by averaging the last hidden states from the CodeBert encoder across all windows. This mechanism reduces memory requirements and allows longer sequences to be processed. Furthermore, the overlap between adjacent windows allows information exchange, making it possible to detect malicious behaviors.</p><p>The sliding window attention mechanism reduces computational complexity and preserves the contextual information of the opcode sequence. Thus, the problem of incomplete information caused by other methods is avoided.</p><p>3) Binary Classification: After getting the global feature representation of the ODTs, we input them into a binary classifier. The classifier consists of fully connected layers and activation functions, trained by minimizing the binary cross-entropy loss function. It distinguishes between benign PHP code and malicious webshells.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) Model Training and Evaluation:</head><p>We fine-tuned the CodeBert model using the AdamW optimizer. Experimental results show that our proposed optimal model achieves an accuracy of 99.2% and an F1 score of 99.1% on the test set. Comparative experiments with accessible state-of-the-art webshell detection methods, including web-shellPub <ref type="bibr">[2]</ref> (Acc: 77.3%, F1: 68.5%), PHP Malware Finder <ref type="bibr">[1]</ref> (Acc:83.4%, F1:78.9%), and MSDetector <ref type="bibr">[3]</ref> (Acc:97.1%, F1: 97.3%), demonstrate the superiority of our method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. CONCLUSION</head><p>This study presents a PHP webshell data processing method that extracts ODTs, addressing the limitations of single-tuples detection. Additionally, we introduce a sliding window attention mechanism that effectively mitigates the challenges of long text detection. This study offers a new perspective on the field of malicious code detection. In the future, we aim to continually explore multi-language webshell detection tasks to improve detection performance and generalization capabilities.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Sliding Window Attention</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Detection steps</head><p>Comparative experiments with state-of-the-art webshell detection methods, including webshellPub <ref type="bibr">[2]</ref> , PHP Malware Finder <ref type="bibr">[1]</ref> and MSDetector <ref type="bibr">[3]</ref>.</p><p>Our detection method was also compared with the Opcode Single-Tuples(OSTs) detection method, demonstrating the superiority of our use of Opcode Double-Tuples(ODTs).</p><p>Our method consists of two steps:    </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Problem and Motivation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Long Webshell Files Detection Method</head><note type="other">Embedding model</note></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Overview of the detection method.</figDesc><graphic coords="1,336.71,506.29,201.60,115.20" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig 3 1 .</head><label>31</label><figDesc>Fig 3. Source code Fig 6. Opcode Single-Tuples Fig 5. Opcode Double-Tuples* Fig 4. Raw opcode</figDesc><graphic coords="3,360.91,450.69,163.00,113.31" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig 7 .</head><label>7</label><figDesc>Fig 7. Sliding Window Attention Mechanism</figDesc><graphic coords="3,528.63,446.51,55.16,117.56" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>1 )Fig 2 .</head><label>12</label><figDesc>Fig 2. Overview of the detection method</figDesc><graphic coords="3,22.53,450.69,166.29,113.31" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Sr (W &gt; Sr)Token embedings formula:E = λ E CodeBert + (1 − λ) E FastTextWe used four different embedding models to perform feature fusion with CodeBERT embeddings. The comparative experimental results are as follows. Training set: validation set: testing set = 8:1:1 Webshells : positive samples. Benign files : negative samples.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig 1 .</head><label>1</label><figDesc>Fig 1.Webshell Threats to Web Application Services</figDesc><graphic coords="3,192.51,450.69,162.87,113.28" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>We fuse the feature vectors generated by CodeBert with the embedding vectors from FastText to form the final feature representation. The specific fusion formula is as follows:</figDesc><table /><note>• Embedding Models: To enhance opcode feature representation, we compared four embedding models: Word2Vec, FastText, Glove, and Doc2Vec. Experimental comparisons show that FastText performs best in the opcode classification task; therefore, we chose FastText as the embedding model.• Feature Fusion:</note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENT</head><p>This work was supported by "the Fundamental Research Funds for the Central Universities" (Grant Number:3282024050).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">PHP malware finder</title>
		<author>
			<persName><surname>Nbs System</surname></persName>
		</author>
		<ptr target="https://github.com/nbs-system/php-malware-finder" />
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">PHP webshell detection</title>
		<author>
			<persName><surname>Shellpub</surname></persName>
		</author>
		<ptr target="https://n.shellpub.com/en" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">MSDetector: a static PHP webshell detection system based on deep learning</title>
		<author>
			<persName><forename type="first">B</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Theoretical Aspects of Software Engineering</title>
				<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="volume">13299</biblScope>
			<biblScope unit="page" from="155" to="172" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A deep learner model for multi-language webshell detection</title>
		<author>
			<persName><forename type="first">A</forename><surname>Hannousse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Nait-Hamoud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yahiouche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Information Security</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="47" to="61" />
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Deep learning based webshell detection coping with long text and lexical ambiguity</title>
		<author>
			<persName><forename type="first">T</forename><surname>An</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Shui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Gao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Information And Communications Security</title>
				<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="438" to="457" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Research and application of artificial intelligence based webshell detection model: a literature review</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zhou</surname></persName>
		</author>
		<idno>2405.00066</idno>
	</analytic>
	<monogr>
		<title level="j">ArXiv</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Usage statistics and market share of PHP for websites</title>
		<author>
			<persName><surname>W3techs</surname></persName>
		</author>
		<ptr target="https://w3techs.com/technologies/details/pl-php" />
		<imprint>
			<date type="published" when="2025">2025</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Codebert: a pre-trained model for programming and natural languages</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ArXiv</title>
		<imprint>
			<biblScope unit="page">8155</biblScope>
			<date type="published" when="2002">2002. 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Bag of tricks for efficient text classification</title>
		<author>
			<persName><forename type="first">A</forename><surname>Joulin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Grave</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bojanowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ArXiv</title>
		<imprint>
			<biblScope unit="volume">1607</biblScope>
			<biblScope unit="page">1759</biblScope>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">PHP malware finder</title>
		<author>
			<persName><surname>Nbs System</surname></persName>
		</author>
		<ptr target="https://github.com/nbs-system/php-malware-finder" />
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">PHP webshell detection</title>
		<author>
			<persName><surname>Shellpub</surname></persName>
		</author>
		<ptr target="https://n.shellpub.com/en" />
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">MSDetector: a static PHP webshell detection system based on deep learning</title>
		<author>
			<persName><forename type="first">B</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Xu</surname></persName>
		</author>
		<ptr target="https://github.com/w-32768/PHP-Webshell-" />
	</analytic>
	<monogr>
		<title level="m">Detection-via-Opcode-Analysis Zhiqiang Wang 1✉ , Haoyu Wang 1✉</title>
				<meeting><address><addrLine>Lu Hao 2</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="volume">13299</biblScope>
			<biblScope unit="page" from="155" to="172" />
		</imprint>
	</monogr>
	<note>Theoretical Aspects of Software Engineering</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
